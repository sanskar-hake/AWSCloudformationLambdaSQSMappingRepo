Resources:
  LambdaExecutionRole:   #Creted Role in the template
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              Resource: "arn:aws:logs:*"
            - Effect: "Allow"
              Action: 
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "arn:aws:logs:*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code: 
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              for record in event['Records']:
                  mails = record["body"].split(",")
                  for mail in mails:
                      print("Hello " + mail)
              return "success"

  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt MySQSQueue.Arn
      FunctionName: !GetAtt LambdaFunction.Arn

  MySQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 30
